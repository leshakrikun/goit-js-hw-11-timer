{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","onTick","intervalId","isActive","startTime","Date","now","setInterval","currentTime","deltaTime","getTimeComponents","days","hours","mins","secs","value","String","padStart","time","pad","Math","floor","countdownTimer","updateClockFace","console","log"],"mappings":";AA8CE,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9CIA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,EAAUC,EAAYC,GAAQ,EAAA,KAAA,GACnCF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbE,KAAAA,WAAa,KACbD,KAAAA,OAASA,EAyChB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAvCA,MAAA,WAAQ,IAAA,EAAA,KACH,IAAA,KAAKE,SAAL,CAGEC,IAAAA,EAAYC,KAAKC,MAClBH,KAAAA,UAAW,EAEXD,KAAAA,WAAaK,YAAY,WACtBC,IACAC,EADcJ,KAAKC,MACOF,EACE,EAAA,EAAKM,kBAAkBD,GAAlDE,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC1B,EAAKb,OAAUU,GAAAA,OAAAA,EAAQC,KAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,KAEvC,QA0BJ,CAAA,IAAA,MAxBC,MAAA,SAAIC,GACIC,OAAAA,OAAOD,GAAOE,SAAS,EAAE,OAuBlC,CAAA,IAAA,oBApBC,MAAA,SAAkBC,GAOR,MAAA,CAACP,KALG,KAAKQ,IAAIC,KAAKC,MAAMH,EAAQ,QAKzBN,MAJF,KAAKO,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAI7CL,KAHV,KAAKM,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGjCJ,KAFhB,KAAKK,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,WAe1D,EA9CIpB,GAsCEwB,EAAiB,IAAIxB,EAAe,CACtCG,OAAQsB,IAKb,SAASA,EAA4C,GAA1BZ,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACEH,MAAAA,GAAAA,OAAAA,EAAQC,KAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,EAAnC,KAHrCU,QAAQC,IAAIH","file":"src.2d5e9e4c.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor(selector, targetDate, onTick) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.onTick = onTick;\n  }\n  start() {\n    if(this.isActive) {\n      return;\n    }\n   const startTime = Date.now();\n   this.isActive = true;\n\n   this.intervalId = setInterval(() => {\n     const currentTime = Date.now();\n     const deltaTime = currentTime - startTime;\n     const {days, hours, mins, secs} = this.getTimeComponents(deltaTime);\n     this.onTick(`${days}:${hours}:${mins}:${secs}`);\n      //console.log(`${days}:${hours}:${mins}:${secs}:`);\n   }, 1000);\n  };\n   pad(value) {\n    return String(value).padStart(2,'0');\n  };\n  \n   getTimeComponents(time) {\n  \n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n      return {days, hours, mins, secs};\n    }\n}\n\n\n  const countdownTimer = new CountdownTimer({\n      onTick: updateClockFace\n  });\n  \n  console.log(countdownTimer);\n\n function updateClockFace ({days, hours, mins, secs}) {\n    /* refs.clockFace.textContents */  return `${days}:${hours}:${mins}:${secs}:`;\n }\n "]}